// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PaperlessRESTAPI.Data;

#nullable disable

namespace PaperlessRESTAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DocumentTag", b =>
                {
                    b.Property<int>("DocumentId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.HasKey("DocumentId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("DocumentTags", (string)null);
                });

            modelBuilder.Entity("PaperlessRESTAPI.Data.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsIndexed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OcrText")
                        .HasColumnType("text");

                    b.Property<string>("Summary")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FileName")
                        .IsUnique();

                    b.HasIndex("IsIndexed");

                    b.HasIndex("IsProcessed");

                    b.HasIndex("UploadDate");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("PaperlessRESTAPI.Data.Entities.DocumentAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AccessDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("DocumentId")
                        .HasColumnType("integer");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("AccessDate");

                    b.HasIndex("ActionType");

                    b.HasIndex("DocumentId");

                    b.ToTable("DocumentAccesses");
                });

            modelBuilder.Entity("PaperlessRESTAPI.Data.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasDefaultValue("#007bff");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#dc3545",
                            CreatedDate = new DateTime(2025, 9, 13, 13, 20, 11, 581, DateTimeKind.Utc).AddTicks(9830),
                            Description = "Important documents",
                            Name = "Important"
                        },
                        new
                        {
                            Id = 2,
                            Color = "#6c757d",
                            CreatedDate = new DateTime(2025, 9, 13, 13, 20, 11, 581, DateTimeKind.Utc).AddTicks(9840),
                            Description = "Archived documents",
                            Name = "Archive"
                        },
                        new
                        {
                            Id = 3,
                            Color = "#28a745",
                            CreatedDate = new DateTime(2025, 9, 13, 13, 20, 11, 581, DateTimeKind.Utc).AddTicks(9840),
                            Description = "Invoice documents",
                            Name = "Invoice"
                        },
                        new
                        {
                            Id = 4,
                            Color = "#007bff",
                            CreatedDate = new DateTime(2025, 9, 13, 13, 20, 11, 581, DateTimeKind.Utc).AddTicks(9840),
                            Description = "Contract documents",
                            Name = "Contract"
                        },
                        new
                        {
                            Id = 5,
                            Color = "#fd7e14",
                            CreatedDate = new DateTime(2025, 9, 13, 13, 20, 11, 581, DateTimeKind.Utc).AddTicks(9840),
                            Description = "Report documents",
                            Name = "Report"
                        });
                });

            modelBuilder.Entity("DocumentTag", b =>
                {
                    b.HasOne("PaperlessRESTAPI.Data.Entities.Document", null)
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PaperlessRESTAPI.Data.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PaperlessRESTAPI.Data.Entities.DocumentAccess", b =>
                {
                    b.HasOne("PaperlessRESTAPI.Data.Entities.Document", "Document")
                        .WithMany("AccessLogs")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("PaperlessRESTAPI.Data.Entities.Document", b =>
                {
                    b.Navigation("AccessLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
