services:
  # PostgreSQL Database
  postgresql:
    image: postgres:16
    container_name: paperless-db
    environment:
      POSTGRES_DB: paperless
      POSTGRES_USER: paperless
      POSTGRES_PASSWORD: paperless
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U paperless -d paperless"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Adminer for database management
  adminer:
    image: adminer
    container_name: paperless-adminer
    ports:
      - "9091:8080"
    depends_on:
      - postgresql

  # REST API
  paperless-api:
    build:
      context: ./PaperlessRESTAPI
      dockerfile: Dockerfile
    container_name: paperless-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgresql;Database=paperless;Username=paperless;Password=paperless;Port=5432
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__UserName=paperless
      - RabbitMQ__Password=paperless
      - MinIO__Endpoint=minio:9000
      - MinIO__AccessKey=paperless
      - MinIO__SecretKey=paperless123
      - MinIO__BucketName=documents
      - MinIO__UseSSL=false
    ports:
      - "8081:8081"
    depends_on:
      postgresql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads

  # Web UI (React Frontend)
  paperless-webui:
    build:
      context: ./PaperlessWebUI
      dockerfile: Dockerfile
    container_name: paperless-webui
    ports:
      - "8080:80"
    depends_on:
      - paperless-api
    environment:
      - VITE_API_BASE_URL=http://paperless-api:8081

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management
    container_name: paperless-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: paperless
      RABBITMQ_DEFAULT_PASS: paperless
    ports:
      - "5672:5672"     # AMQP port
      - "15672:15672"   # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: paperless-minio
    command: server /data --console-address ":9090"
    environment:
      MINIO_ROOT_USER: paperless
      MINIO_ROOT_PASSWORD: paperless123
    ports:
      - "9000:9000"      # MinIO API
      - "9090:9090"      # MinIO Console
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Background Services (OCR, GenAI, etc.)
  paperless-services:
    build:
      context: ./PaperlessServices
      dockerfile: Dockerfile
    container_name: paperless-services
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__UserName=paperless
      - RabbitMQ__Password=paperless
      - RabbitMQ__Port=5672
      - MinIO__Endpoint=minio:9000
      - MinIO__AccessKey=paperless
      - MinIO__SecretKey=paperless123
      - MinIO__BucketName=documents
      - MinIO__UseSSL=false
    depends_on:
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
    restart: unless-stopped

volumes:
  postgres_data:
  rabbitmq_data:
  minio_data:
